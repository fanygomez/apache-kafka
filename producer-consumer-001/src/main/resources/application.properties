spring.application.name=producer-consumer-001

#kafka config

spring.kafka.bootstrap-servers=localhost:9092
#Esta propiedad define la dirección del clúster de Kafka al que se conectará la aplicación. En este caso, se está conectando a un broker Kafka que se ejecuta localmente en el puerto 9092.
#Uso: Es el primer paso para que los productores y consumidores se conecten a Kafka. Puede incluir múltiples brokers separados por comas para aumentar la disponibilidad y la tolerancia a fallos.

spring.kafka.consumer.group-id=my-group
#Descripción: Este parámetro establece el ID del grupo del consumidor. Los consumidores que pertenecen al mismo grupo compiten por recibir mensajes de las particiones del topic, lo que permite la escalabilidad.
#Uso: Es útil para el balanceo de carga, ya que permite que múltiples consumidores lean de un topic en paralelo. Si un consumidor falla, otro en el mismo grupo puede tomar su lugar.

spring.kafka.consumer.auto-offset-reset=earliest
#Descripción: Esta propiedad determina qué debe hacer el consumidor si no hay un offset (posición) previamente guardado en Kafka. earliest significa que el consumidor comenzará a leer desde el primer mensaje disponible en la partición.
#Uso: Es útil en escenarios donde se quiere procesar todos los mensajes desde el principio, especialmente en nuevas aplicaciones o durante el desarrollo. Otras opciones son:
#    - latest: Comenzar a leer desde el final (es decir, solo recibir nuevos mensajes).
#    - none: Lanzar una excepción si no hay un offset guardado.

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#Descripción: Este parámetro especifica el deserializador que se usará para convertir las claves de los mensajes de Kafka desde bytes a objetos Java. En este caso, se está utilizando StringDeserializer, que convierte la clave en un objeto String.
#Uso: Es necesario que tanto el productor como el consumidor utilicen el mismo tipo de serializador/deserializador para garantizar que los datos se interpreten correctamente.

spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#Descripción: Similar a la propiedad anterior, pero esta vez se refiere al deserializador que convierte los valores de los mensajes desde bytes a objetos Java. Se utiliza StringDeserializer para convertir el valor en un objeto String.
#Uso: Asegura que los valores de los mensajes sean interpretados como cadenas en la aplicación

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#Descripción: Esta propiedad define el serializador que se usará para convertir las claves de los mensajes que se envían al broker Kafka desde objetos Java a bytes. Aquí se utiliza StringSerializer, que convierte la clave en un array de bytes que representa una cadena.
#Uso: Al igual que el deserializador, es fundamental que el productor y el consumidor usen los mismos tipos para asegurar la compatibilidad.

spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#Descripción: Similar a la propiedad anterior, pero para los valores de los mensajes que se envían al broker. StringSerializer convierte el valor en un array de bytes.
#Uso: Esto asegura que los valores de los mensajes se envíen correctamente al broker como cadenas.